[tool.poetry]
name = "discord-app-example"
version = "v0.0.0"
description = ""
authors = ["thijsfranck <thijsfranck@gmail.com>"]
readme = "README.md"
license = "MIT"
exclude = ["**/test__*.py"]

[tool.poetry.dependencies]
python = "^3.12"
discord-py = "2.4.0"
python-dotenv = "^1.0.1"

[tool.poetry.dev-dependencies]
mike = "^2.1.2"
mkdocs = "^1.6.0"
mkdocs-material = "^9.5.28"
pre-commit = "^3.7.1"
pymdown-extensions = "^10.8.1"
pytest = "^8.2.2"
pytest-asyncio = "^0.23.7"
pytest-mock = "^3.14.0"
pytest-sugar = "^1.0.0"
python-semantic-release = "^9.8.5"
ruff = "^0.5.1"

[tool.pyright]
typeCheckingMode = "basic"
pythonVersion = "3.12"
reportUnnecessaryTypeIgnoreComment = "error"

[tool.pytest.ini_options]
filterwarnings = [
    "ignore:'audioop' is deprecated and slated for removal in Python 3.13",
]

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
ignore = [
    # Self and cls do not require annotations.
    "ANN101",
    "ANN102",
    # Module level docstrings don't always make sense
    "D104",
    # Pyright error codes are obnoxiously long. Ignore lint telling you to use them.
    "PGH003",
    # Documenting every file is a bit redundant for us.
    "D100",
    # No point in documenting magic methods.
    "D105",
    # Makes more sense to use `Parameters` in the main class instead of in the `__init__` .
    "D107",
    # We do not need cryptographically secure random functions.
    "S311",
]
select = ["ALL"]

[tool.ruff.lint.per-file-ignores]
"**/test__*.py" = ["S101", "PLR2004"]
"examples/**/*.py" = ["INP001"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.semantic_release]
assets = []
build_command_env = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = true
repo_dir = "/workspaces/discord-app-example"
no_git_verify = false
tag_format = "v{version}"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "docs/CHANGELOG.md"
exclude_commit_patterns = [
    "^build",
    "^chore",
    "^ci",
    "^pre-commit",
    "^refactor",
    "^style",
    "^test",
    '^\[pre-commit\.ci\]',
    "Merge pull request",
    "initial commit",
]

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = ["feat"]
patch_tags = ["docs", "fix", "perf"]
default_bump_level = 0

[tool.semantic_release.publish]
upload_to_vcs_release = false

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = true
insecure = false

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
